/**
 * Sistema de Autentica√ß√£o - Instituto Buriti
 * Gerenciamento de login, logout e verifica√ß√£o de tokens
 * 
 * VERS√ÉO CORRIGIDA CONFORME ORIENTA√á√ÉO QWEN
 * - Credenciais corretas: ana.silva@email.com / 123456
 * - Logs de debug implementados
 */ 

// Configura√ß√£o para usar valida√ß√£o local temporariamente
const USE_SUPABASE = false;

// CORRE√á√ÉO QWEN: Credenciais v√°lidas corretas para demonstra√ß√£o
const VALID_CREDENTIALS = {
        'ana.silva@email.com': '123456'  // ‚úÖ CREDENCIAIS CORRETAS CONFORME QWEN
};

// Fun√ß√£o de valida√ß√£o local com logs de debug
function validateLocalCredentials(email, password) {
        console.log("üîç QWEN DEBUG: Validando credenciais locais...");
        console.log("üìß Email recebido:", email);
        console.log("üîë Senha recebida:", password);
        console.log("üìã Credenciais v√°lidas dispon√≠veis:", Object.keys(VALID_CREDENTIALS));
        
        const isValid = VALID_CREDENTIALS[email] === password;
        console.log("‚úÖ Resultado da valida√ß√£o:", isValid);
        
        return isValid;
}

// Sistema de autentica√ß√£o simplificado
class AuthManager {
        constructor() {
                    console.log("üöÄ QWEN DEBUG: Inicializando AuthManager...");
                    this.token = localStorage.getItem('auth_token');
                    this.user = JSON.parse(localStorage.getItem('user_data') || 'null');
                    console.log("üíæ Token existente:", this.token);
                    console.log("üë§ Usu√°rio existente:", this.user);
                    this.init();
        }

    init() {
                console.log("üîß QWEN DEBUG: Inicializando sistema de autentica√ß√£o...");
                // Verificar token ao inicializar
            if (this.token) {
                            console.log("üîç Token encontrado, verificando...");
                            this.verifyToken();
            } else {
                            console.log("‚ùå Nenhum token encontrado");
            }
    }

    async login(email, password) {
                console.log("üöÄ QWEN DEBUG: authenticateUser chamada com:", { email, password });
                
                try {
                                if (USE_SUPABASE) {
                                                    console.log("üåê Usando autentica√ß√£o Supabase...");
                                                    // C√≥digo Supabase original (desabilitado)
                                    return { success: false, error: 'Supabase temporariamente desabilitado' };
                                } else {
                                                    console.log("üè† Usando valida√ß√£o local...");
                                                    
                                    // Valida√ß√£o local para demonstra√ß√£o
                                    const isValid = validateLocalCredentials(email, password);
                                    
                                    if (isValid) {
                                                            console.log("üîë QWEN DEBUG: Login v√°lido, salvando estado...");
                                                            
                                                            this.token = 'demo_token_' + Date.now();
                                                            this.user = {
                                                                                        id: 1,
                                                                                        email: email,
                                                                                        name: 'Ana Silva',
                                                                                        role: 'aluno'
                                                            };

                                                        console.log("üíæ Salvando no localStorage...");
                                                        localStorage.setItem('auth_token', this.token);
                                                            localStorage.setItem('user_data', JSON.stringify(this.user));
                                                            localStorage.setItem('userLoggedIn', 'true');
                                                            localStorage.setItem('userEmail', email);
                                                            
                                                            console.log("üíæ QWEN DEBUG: Estado salvo no localStorage:");
                                                            console.log("  - auth_token:", localStorage.getItem('auth_token'));
                                                            console.log("  - user_data:", localStorage.getItem('user_data'));
                                                            console.log("  - userLoggedIn:", localStorage.getItem('userLoggedIn'));
                                                            console.log("  - userEmail:", localStorage.getItem('userEmail'));

                                                        console.log("üß≠ QWEN DEBUG: Redirecionando para o dashboard...");
                                                        return { success: true, user: this.user };
                                    } else {
                                                            console.error("‚ùå QWEN DEBUG: Credenciais inv√°lidas.");
                                                            return { success: false, error: 'E-mail ou senha incorretos' };
                                    }
                                }
                } catch (error) {
                                console.error('üö® QWEN DEBUG: Erro no login:', error);
                                return { success: false, error: 'Erro de conex√£o' };
                }
    }

    logout() {
                console.log("üö™ QWEN DEBUG: Executando logout...");
                
                this.token = null;
                this.user = null;
                
                console.log("üóëÔ∏è Removendo dados do localStorage...");
                localStorage.removeItem('auth_token');
                localStorage.removeItem('user_data');
                localStorage.removeItem('userLoggedIn');
                localStorage.removeItem('userEmail');
                
                console.log("‚úÖ Dados removidos do localStorage");

            // Redirecionar para p√°gina de login
            console.log("üß≠ QWEN DEBUG: Redirecionando para login...");
            window.location.href = '/pages/login-aluno.html';
    }

    isAuthenticated() {
                const authenticated = !!this.token && !!this.user;
                console.log("üîç QWEN DEBUG: Verificando autentica√ß√£o:", authenticated);
                return authenticated;
    }

    getUser() {
                console.log("üë§ QWEN DEBUG: Retornando usu√°rio:", this.user);
                return this.user;
    }

    // FASE 2 SE√á√ÉO 4 QWEN: Fun√ß√£o de compatibilidade para biblioteca.js
    getCurrentUser() {
                console.log("üë§ QWEN DEBUG: getCurrentUser chamada - redirecionando para getUser()");
                return this.getUser();
    }

    verifyToken() {
                console.log("üîç QWEN DEBUG: Verificando token...");
                // Para demonstra√ß√£o, sempre considerar token v√°lido se existir
            if (!this.token) {
                            console.log("‚ùå Token inv√°lido, fazendo logout...");
                            this.logout();
            } else {
                            console.log("‚úÖ Token v√°lido");
            }
    }
}

// Inst√¢ncia global do AuthManager
console.log("üåü QWEN DEBUG: Criando inst√¢ncia global do AuthManager...");
const authManager = new AuthManager();

// Exportar para uso global
window.authManager = authManager;
console.log("‚úÖ QWEN DEBUG: AuthManager dispon√≠vel globalmente");

// QWEN DEBUG: Timestamp da corre√ß√£o
console.log("üïí QWEN CORRE√á√ÉO IMPLEMENTADA EM:", new Date().toISOString());

